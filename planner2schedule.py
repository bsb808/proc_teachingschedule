import openpyxl 
from openpyxl.styles import Border, Side, PatternFill, Font, GradientFill, Alignment

class Section:
    def __init__(self, qtr, number, title, is_dl):
        self.number = number
        self.title = title
        self.qtr = qtr
        self.is_dl = is_dl
        self.currics = []

def is_in_sections(sections, s):
    '''  Is the sectin in a list of sections? '''
    for sec in sections:
        if ((sec.number == s.number) and
            (sec.qtr == s.qtr) and
            (sec.is_dl == s.is_dl)):
            return True
    return False

def add_section(sections, qtr, number, title, is_dl, curric):                  
        # Create a section - counts on a sections list at is modified in place
        s = Section(qtr, number, title, is_dl)
        if not is_in_sections(sections, s):
            sections.append(s)
            

        
planner='MAE_Planner_AY24.xlsx'
wb = openpyxl.load_workbook(planner)
ws = wb.active

rows = []

# Row with DL designation
dl = 5
for row in ws.iter_rows(
        min_row = dl, max_row = dl,
        min_col=1, max_col=ws.max_column,
        values_only=True):
    dl_row = row

# Merged dl_row
mdl_row = []
for c, col_index in zip(dl_row,range(ws.max_column)):
    val = c
    if c is None:
        # Replace None with blank string
        val = ''
        for crange in ws.merged_cells:
            clo,rlo,chi,rhi = crange.bounds
            top_value = ws.cell(rlo,clo).value
            if (rlo<=dl and dl<=rhi
                and clo<=col_index and col_index<=chi):
                val = top_value
                break
    mdl_row.append(val)
    
# Specify the 4 rows for the AY we are interested in.
fall_row = 9
summer_row = 12

for row in ws.iter_rows(
        min_row = fall_row, max_row = summer_row,
        min_col=1, max_col=ws.max_column,
        values_only=True):
    rows.append(row)

# Keys are instructor names, values are a list of Sections
instructors = dict()

qtrs = ['fall', 'winter', 'spring', 'summer']

for row, qtr in zip(rows, qtrs):
    for cell, dl_cell in zip(row, mdl_row):
        if not (cell is None):
            n = cell.find('[')
            m = cell.find(']')
            if ((n > 0) and (m > 0)):                    
                inames = cell[n+1:m]
                # Check for multiple instructors
                iname_list = inames.split('/')
                for iname in iname_list:
                    part = cell[:n-1]
                    ss = part.splitlines()
                    if len(ss) < 1:
                        print("Error with cell: "+cell)
                        break
                    cnum = ss[0]
                    if len(iname_list) > 1:
                        cnum = cnum + '(1/%d)'%len(iname_list)
                    if len(ss) > 1:
                        ctitle = "".join(ss[1:])
                    else:
                        ctitle = ""

                    # DL or not?
                    isdl = False
                    if dl_cell.find('DL') > 0:
                        isdl = True
                    instructors.setdefault(iname, [])
                    add_section(instructors[iname], qtr, cnum, ctitle, isdl, [])


# Print
for k in instructors.keys():
    print(k, end=": ")
    sections = instructors[k]
    for qtr in qtrs:
        print(qtr, end=": ")
        for s in sections:
            if s.qtr == qtr:
                if s.is_dl:
                    print(s.number, end="(DL), ")
                else:
                    print(s.number, end=", ")                    

    print("")
    
                    
# Write teaching schedule

tsb = openpyxl.Workbook()
ts = tsb.active

keys = list(instructors.keys())
keys.sort()

r = 1
c = 1
ts.cell(row = 1, column = 1,
        value = 'Draft Teaching Schedule Autogenerated on XXXX')

r = 2
ts.cell(row = r, column = 1,
        value = 'Name')
for ii in range(1,5):
    ts.merge_cells(start_row = r, start_column = 2*ii,
                   end_row = r, end_column = 2*ii + 1)
    ts.cell(row = r, column = 2*ii, value = qtrs[ii-1]).alignment = Alignment(horizontal = 'center')


r = 3
for ii in range(4):
    ts.cell(row = r, column = 2*(ii+1),
            value = 'RES').alignment = Alignment(horizontal = 'center')

    ts.cell(row = r, column = 2*(ii+1)+1,
            value = 'DL').alignment = Alignment(horizontal = 'center')


r = 4
for k in keys:
    ts.cell(row = r, column = 1,
            value = k).alignment = Alignment(vertical = 'center')

    c = 2
    r0 = r
    maxr = r
    sections = instructors[k]
    for qtr in qtrs:
        r = r0
        for is_dl in [False, True]:
            r = r0
            for s in sections:
                if (s.qtr == qtr) and (s.is_dl == is_dl):
                    ts.cell(row = r, column = c,
                            value = s.number)
                    if r > maxr:
                        maxr = r
                    r += 1
            c += 1
                    
    ts.merge_cells(start_row = r0, start_column = 1,
                   end_row = maxr, end_column = 1)
    r = maxr + 1

# Set widths
ts.column_dimensions['A'].width = 20

cs = ['B','C','D','E','F','G','H','I']
for c in cs:
    ts.column_dimensions[c].width = 17
tsb.save('teaching_schedule.xlsx')
